import pandas as pd
import numpy as np
from tqdm import tqdm
import math

data = pd.read_csv('data/cities.csv', index_col='CityId')

def getFastDistanceL1(ids, window_size, idx):
    vector1 = data.loc[ids]
    vector2 = vector1.shift(-1)[:-1]
    vector1 = vector1[:-1]
    distance = np.linalg.norm(vector1.values - vector2.values, axis=1)
    primeStep = getstep(window_size, idx)
    if primeStep !=0 and primeStep < window_size and is_prime(ids[primeStep]):
        distance[primeStep-1] *= 1.1
    distance = np.sum(distance)
    return distance

def getstep(window_size, idx):
    #indices = [i+idx for i in range(window_size)]
    step = 10 - idx%10
    return step

def is_prime(n):
    if n == 1:
        return False
    i = 2
    while i*i <= n:
        if n % i == 0:
            return False
        i += 1
    return True

def get_score(output):
    plist = [i for i in range(len(output)) if is_prime(i)]
    cities = pd.read_csv('data/cities.csv')
    all_ids = cities['CityId'].values
    all_x = cities['X'].values
    all_y = cities['Y'].values

    arr = dict()
    for i, id in enumerate(all_ids):
        arr[id] = (all_x[i], all_y[i])

    score = 0.0
    s = output
    for i in tqdm(range(0, len(s)-1)):
        p1 = arr[s[i]]
        p2 = arr[s[i+1]]
        stepSize = math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]))
        if ((i + 1) % 10 == 0) and (s[i] not in plist):
            stepSize *= 1.1
        # print(stepSize)
        score += stepSize
    return score

# ids = np.array(
#       [[ 70519, 114579,  46360,  29922, 137367,  97580,  21210],
#        [ 70519, 114579,  46360,  29922,  97580, 137367,  21210],
#        [ 70519, 114579,  46360, 137367,  29922,  97580,  21210],
#        [ 70519, 114579,  46360, 137367,  97580,  29922,  21210],
#        [ 70519, 114579,  46360,  97580,  29922, 137367,  21210],
#        [ 70519, 114579,  46360,  97580, 137367,  29922,  21210],
#        [ 70519, 114579,  29922,  46360, 137367,  97580,  21210],
#        [ 70519, 114579,  29922,  46360,  97580, 137367,  21210],
#        [ 70519, 114579,  29922, 137367,  46360,  97580,  21210],
#        [ 70519, 114579,  29922, 137367,  97580,  46360,  21210],
#        [ 70519, 114579,  29922,  97580,  46360, 137367,  21210],
#        [ 70519, 114579,  29922,  97580, 137367,  46360,  21210],
#        [ 70519, 114579, 137367,  46360,  29922,  97580,  21210],
#        [ 70519, 114579, 137367,  46360,  97580,  29922,  21210],
#        [ 70519, 114579, 137367,  29922,  46360,  97580,  21210],
#        [ 70519, 114579, 137367,  29922,  97580,  46360,  21210],
#        [ 70519, 114579, 137367,  97580,  46360,  29922,  21210],
#        [ 70519, 114579, 137367,  97580,  29922,  46360,  21210],
#        [ 70519, 114579,  97580,  46360,  29922, 137367,  21210],
#        [ 70519, 114579,  97580,  46360, 137367,  29922,  21210],
#        [ 70519, 114579,  97580,  29922,  46360, 137367,  21210],
#        [ 70519, 114579,  97580,  29922, 137367,  46360,  21210],
#        [ 70519, 114579,  97580, 137367,  46360,  29922,  21210],
#        [ 70519, 114579,  97580, 137367,  29922,  46360,  21210],
#        [ 70519,  46360, 114579,  29922, 137367,  97580,  21210],
#        [ 70519,  46360, 114579,  29922,  97580, 137367,  21210],
#        [ 70519,  46360, 114579, 137367,  29922,  97580,  21210],
#        [ 70519,  46360, 114579, 137367,  97580,  29922,  21210],
#        [ 70519,  46360, 114579,  97580,  29922, 137367,  21210],
#        [ 70519,  46360, 114579,  97580, 137367,  29922,  21210],
#        [ 70519,  46360,  29922, 114579, 137367,  97580,  21210],
#        [ 70519,  46360,  29922, 114579,  97580, 137367,  21210],
#        [ 70519,  46360,  29922, 137367, 114579,  97580,  21210],
#        [ 70519,  46360,  29922, 137367,  97580, 114579,  21210],
#        [ 70519,  46360,  29922,  97580, 114579, 137367,  21210],
#        [ 70519,  46360,  29922,  97580, 137367, 114579,  21210],
#        [ 70519,  46360, 137367, 114579,  29922,  97580,  21210],
#        [ 70519,  46360, 137367, 114579,  97580,  29922,  21210],
#        [ 70519,  46360, 137367,  29922, 114579,  97580,  21210],
#        [ 70519,  46360, 137367,  29922,  97580, 114579,  21210],
#        [ 70519,  46360, 137367,  97580, 114579,  29922,  21210],
#        [ 70519,  46360, 137367,  97580,  29922, 114579,  21210],
#        [ 70519,  46360,  97580, 114579,  29922, 137367,  21210],
#        [ 70519,  46360,  97580, 114579, 137367,  29922,  21210],
#        [ 70519,  46360,  97580,  29922, 114579, 137367,  21210],
#        [ 70519,  46360,  97580,  29922, 137367, 114579,  21210],
#        [ 70519,  46360,  97580, 137367, 114579,  29922,  21210],
#        [ 70519,  46360,  97580, 137367,  29922, 114579,  21210],
#        [ 70519,  29922, 114579,  46360, 137367,  97580,  21210],
#        [ 70519,  29922, 114579,  46360,  97580, 137367,  21210],
#        [ 70519,  29922, 114579, 137367,  46360,  97580,  21210],
#        [ 70519,  29922, 114579, 137367,  97580,  46360,  21210],
#        [ 70519,  29922, 114579,  97580,  46360, 137367,  21210],
#        [ 70519,  29922, 114579,  97580, 137367,  46360,  21210],
#        [ 70519,  29922,  46360, 114579, 137367,  97580,  21210],
#        [ 70519,  29922,  46360, 114579,  97580, 137367,  21210],
#        [ 70519,  29922,  46360, 137367, 114579,  97580,  21210],
#        [ 70519,  29922,  46360, 137367,  97580, 114579,  21210],
#        [ 70519,  29922,  46360,  97580, 114579, 137367,  21210],
#        [ 70519,  29922,  46360,  97580, 137367, 114579,  21210],
#        [ 70519,  29922, 137367, 114579,  46360,  97580,  21210],
#        [ 70519,  29922, 137367, 114579,  97580,  46360,  21210],
#        [ 70519,  29922, 137367,  46360, 114579,  97580,  21210],
#        [ 70519,  29922, 137367,  46360,  97580, 114579,  21210],
#        [ 70519,  29922, 137367,  97580, 114579,  46360,  21210],
#        [ 70519,  29922, 137367,  97580,  46360, 114579,  21210],
#        [ 70519,  29922,  97580, 114579,  46360, 137367,  21210],
#        [ 70519,  29922,  97580, 114579, 137367,  46360,  21210],
#        [ 70519,  29922,  97580,  46360, 114579, 137367,  21210],
#        [ 70519,  29922,  97580,  46360, 137367, 114579,  21210],
#        [ 70519,  29922,  97580, 137367, 114579,  46360,  21210],
#        [ 70519,  29922,  97580, 137367,  46360, 114579,  21210],
#        [ 70519, 137367, 114579,  46360,  29922,  97580,  21210],
#        [ 70519, 137367, 114579,  46360,  97580,  29922,  21210],
#        [ 70519, 137367, 114579,  29922,  46360,  97580,  21210],
#        [ 70519, 137367, 114579,  29922,  97580,  46360,  21210],
#        [ 70519, 137367, 114579,  97580,  46360,  29922,  21210],
#        [ 70519, 137367, 114579,  97580,  29922,  46360,  21210],
#        [ 70519, 137367,  46360, 114579,  29922,  97580,  21210],
#        [ 70519, 137367,  46360, 114579,  97580,  29922,  21210],
#        [ 70519, 137367,  46360,  29922, 114579,  97580,  21210],
#        [ 70519, 137367,  46360,  29922,  97580, 114579,  21210],
#        [ 70519, 137367,  46360,  97580, 114579,  29922,  21210],
#        [ 70519, 137367,  46360,  97580,  29922, 114579,  21210],
#        [ 70519, 137367,  29922, 114579,  46360,  97580,  21210],
#        [ 70519, 137367,  29922, 114579,  97580,  46360,  21210],
#        [ 70519, 137367,  29922,  46360, 114579,  97580,  21210],
#        [ 70519, 137367,  29922,  46360,  97580, 114579,  21210],
#        [ 70519, 137367,  29922,  97580, 114579,  46360,  21210],
#        [ 70519, 137367,  29922,  97580,  46360, 114579,  21210],
#        [ 70519, 137367,  97580, 114579,  46360,  29922,  21210],
#        [ 70519, 137367,  97580, 114579,  29922,  46360,  21210],
#        [ 70519, 137367,  97580,  46360, 114579,  29922,  21210],
#        [ 70519, 137367,  97580,  46360,  29922, 114579,  21210],
#        [ 70519, 137367,  97580,  29922, 114579,  46360,  21210],
#        [ 70519, 137367,  97580,  29922,  46360, 114579,  21210],
#        [ 70519,  97580, 114579,  46360,  29922, 137367,  21210],
#        [ 70519,  97580, 114579,  46360, 137367,  29922,  21210],
#        [ 70519,  97580, 114579,  29922,  46360, 137367,  21210],
#        [ 70519,  97580, 114579,  29922, 137367,  46360,  21210],
#        [ 70519,  97580, 114579, 137367,  46360,  29922,  21210],
#        [ 70519,  97580, 114579, 137367,  29922,  46360,  21210],
#        [ 70519,  97580,  46360, 114579,  29922, 137367,  21210],
#        [ 70519,  97580,  46360, 114579, 137367,  29922,  21210],
#        [ 70519,  97580,  46360,  29922, 114579, 137367,  21210],
#        [ 70519,  97580,  46360,  29922, 137367, 114579,  21210],
#        [ 70519,  97580,  46360, 137367, 114579,  29922,  21210],
#        [ 70519,  97580,  46360, 137367,  29922, 114579,  21210],
#        [ 70519,  97580,  29922, 114579,  46360, 137367,  21210],
#        [ 70519,  97580,  29922, 114579, 137367,  46360,  21210],
#        [ 70519,  97580,  29922,  46360, 114579, 137367,  21210],
#        [ 70519,  97580,  29922,  46360, 137367, 114579,  21210],
#        [ 70519,  97580,  29922, 137367, 114579,  46360,  21210],
#        [ 70519,  97580,  29922, 137367,  46360, 114579,  21210],
#        [ 70519,  97580, 137367, 114579,  46360,  29922,  21210],
#        [ 70519,  97580, 137367, 114579,  29922,  46360,  21210],
#        [ 70519,  97580, 137367,  46360, 114579,  29922,  21210],
#        [ 70519,  97580, 137367,  46360,  29922, 114579,  21210],
#        [ 70519,  97580, 137367,  29922, 114579,  46360,  21210],
#        [ 70519,  97580, 137367,  29922,  46360, 114579,  21210]])
#
# sorted_l1 = np.array([ 19,  18,   5,  22,   4,  23,  21,  20,   3,  16,  13,  15,  14,
#          0,  10,   9,   1,   8,   7,   2,  97,  12,  11,  17,   6,  96,
#         29,  43, 103, 100, 102,  28,  42,  98,  99, 101,  40, 116,  82,
#        106,  79,  76, 114,  90,  37,  85,  66,  64,  63,  86, 110,  88,
#        104, 105, 107, 108,  62, 112, 113,  87,  61, 119, 118,  34,  33,
#         32,  31,  52,  39,  55,  38,  58,  73,  27,  46,  92,  49,  65,
#         24,  84,  68,  60,  89,  47,  45,  44,  26,  25,  91,  57, 115,
#         56, 109,  81,  80, 111,  77, 117,  67,  53,  35,  30,  36,  48,
#         95,  94,  93,  50,  51,  83,  54,  78,  75,  74,  72,  71,  70,
#         69,  41,  59])



# step = 5
# idx = 5
# window_size = 7
#
# l2_value = []
# for i in ids:
#     d = getFastDistanceL1(i,window_size,idx)
#     l2_value.append(d)
#
# sorted_l2 = np.argsort(l2_value)
# print(sorted_l2)


l0 = [127823, 91993, 25117, 178071, 124478, 119633, 161889]
l5 = [127823, 91993, 25117, 119633, 124478, 178071, 161889]
print('l0 : ',get_score(l0))
print('l5 : ',get_score(l5))

ids = [1,3,4,3,4,3,2,5,4,4,4,3,2]
prime = False
for i in ids[1:]:
    if primeList[i]:
        prime = True